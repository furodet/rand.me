/*-
 * Copyright (c) 2018 rand.me project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package me.rand.simulator.test.instructions

import me.rand.commons.idioms.Status._
import me.rand.simulator.test.BaseSpec
import me.rand.vm.engine.{Variable, VmContext}

class CompareSpec extends BaseSpec {

  class ExpectedComparison(val x: String, val tx: String,
                           val y: String, val ty: String,
                           val values: Map[Symbol, Int]) {
    override def toString: String =
      s"($x:$tx) ($y:$ty) : eq=${values.get('==)} !eq=${values.get('!=)} lt=${values.get('<)} lte=${values.get('<=)} gt=${values.get('>)} gte=${values.get('>=)}"
  }

  private def compareAndTest(expected: ExpectedComparison, operation: Symbol): Unit = {
    println(s"Testing: $expected / $operation")
    successfullyAssembleAndExecute(
      s"""
         | $aStandardMachineConfiguration
         | .bb main
         |   .var x %0 u8
         |   ?${operation.name} (${expected.x}:${expected.tx}) (${expected.y}:${expected.ty}) > %0
         | exit (00:u8)
         | .boot main
       """.stripMargin
    ).thenVerify {
      case vmContext =>
        hasHeapValueEqualTo(expected.values(operation), "x", 0)(vmContext)
    }
  }

  private def compareAndTestAll(expected: ExpectedComparison): Unit =
    List('==, '!=, '<, '<=, '>, '>=).foreach(compareAndTest(expected, _))

  private def stringToExpectedComparison(string: String): ExpectedComparison =
    string.trim.split(" ").toList match {
      case x :: tx :: y :: ty :: eq :: neq :: lt :: lte :: gt :: gte :: Nil =>
        new ExpectedComparison(x, tx, y, ty,
          Map('== -> eq.toInt, '!= -> neq.toInt, '< -> lt.toInt, '<= -> lte.toInt, '> -> gt.toInt, '>= -> gte.toInt))

      case _ =>
        fail(s"invalid definition in test '$string'")
    }

  "?..." should "pass imm imm > %x" in {
    List(
      "0000 u16 0000 u16 1 0 0 1 0 1",
      "0000 s16 0000 u16 1 0 0 1 0 1",
      "0000 u16 0000 s16 1 0 0 1 0 1",
      "0000 s16 0000 s16 1 0 0 1 0 1",
      "0000 u16 0001 u16 0 1 1 1 0 0",
      "0000 s16 0001 u16 0 1 1 1 0 0",
      "0000 u16 0001 s16 0 1 1 1 0 0",
      "0000 s16 0001 s16 0 1 1 1 0 0",
      "0000 u16 00fe u16 0 1 1 1 0 0",
      "0000 s16 00fe u16 0 1 1 1 0 0",
      "0000 u16 00fe s16 0 1 1 1 0 0",
      "0000 s16 00fe s16 0 1 1 1 0 0",
      "0000 u16 00ff u16 0 1 1 1 0 0",
      "0000 s16 00ff u16 0 1 1 1 0 0",
      "0000 u16 00ff s16 0 1 1 1 0 0",
      "0000 s16 00ff s16 0 1 1 1 0 0",
      "0000 u16 0100 u16 0 1 1 1 0 0",
      "0000 s16 0100 u16 0 1 1 1 0 0",
      "0000 u16 0100 s16 0 1 1 1 0 0",
      "0000 s16 0100 s16 0 1 1 1 0 0",
      "0000 u16 0101 u16 0 1 1 1 0 0",
      "0000 s16 0101 u16 0 1 1 1 0 0",
      "0000 u16 0101 s16 0 1 1 1 0 0",
      "0000 s16 0101 s16 0 1 1 1 0 0",
      "0000 u16 0ffe u16 0 1 1 1 0 0",
      "0000 s16 0ffe u16 0 1 1 1 0 0",
      "0000 u16 0ffe s16 0 1 1 1 0 0",
      "0000 s16 0ffe s16 0 1 1 1 0 0",
      "0000 u16 0fff u16 0 1 1 1 0 0",
      "0000 s16 0fff u16 0 1 1 1 0 0",
      "0000 u16 0fff s16 0 1 1 1 0 0",
      "0000 s16 0fff s16 0 1 1 1 0 0",
      "0000 u16 1000 u16 0 1 1 1 0 0",
      "0000 s16 1000 u16 0 1 1 1 0 0",
      "0000 u16 1000 s16 0 1 1 1 0 0",
      "0000 s16 1000 s16 0 1 1 1 0 0",
      "0000 u16 1001 u16 0 1 1 1 0 0",
      "0000 s16 1001 u16 0 1 1 1 0 0",
      "0000 u16 1001 s16 0 1 1 1 0 0",
      "0000 s16 1001 s16 0 1 1 1 0 0",
      "0000 u16 fffe u16 0 1 1 1 0 0",
      "0000 s16 fffe u16 0 1 1 1 0 0",
      // FAILS HERE
      // I don't get the point... u16 and s16 have the same rank, according to 6.3.1.1.
      // So fffe should be converted to the unsigned counterpart.
      // It implies 0001:u16 < fffe:u16 is true... Result is the opposite, due to implicit
      // integer conversion, which must be clarified.
      /*
      "0000 u16 fffe s16 0 1 0 0 1 1",
      "0000 s16 fffe s16 0 1 0 0 1 1",
      "0000 u16 ffff u16 0 1 1 1 0 0",
      "0000 s16 ffff u16 0 1 1 1 0 0",
      "0000 u16 ffff s16 0 1 0 0 1 1",
      "0000 s16 ffff s16 0 1 0 0 1 1",
      "0001 u16 0000 u16 0 1 0 0 1 1",
      "0001 s16 0000 u16 0 1 0 0 1 1",
      "0001 u16 0000 s16 0 1 0 0 1 1",
      "0001 s16 0000 s16 0 1 0 0 1 1",
      "0001 u16 0001 u16 1 0 0 1 0 1",
      "0001 s16 0001 u16 1 0 0 1 0 1",
      "0001 u16 0001 s16 1 0 0 1 0 1",
      "0001 s16 0001 s16 1 0 0 1 0 1",
      "0001 u16 00fe u16 0 1 1 1 0 0",
      "0001 s16 00fe u16 0 1 1 1 0 0",
      "0001 u16 00fe s16 0 1 1 1 0 0",
      "0001 s16 00fe s16 0 1 1 1 0 0",
      "0001 u16 00ff u16 0 1 1 1 0 0",
      "0001 s16 00ff u16 0 1 1 1 0 0",
      "0001 u16 00ff s16 0 1 1 1 0 0",
      "0001 s16 00ff s16 0 1 1 1 0 0",
      "0001 u16 0100 u16 0 1 1 1 0 0",
      "0001 s16 0100 u16 0 1 1 1 0 0",
      "0001 u16 0100 s16 0 1 1 1 0 0",
      "0001 s16 0100 s16 0 1 1 1 0 0",
      "0001 u16 0101 u16 0 1 1 1 0 0",
      "0001 s16 0101 u16 0 1 1 1 0 0",
      "0001 u16 0101 s16 0 1 1 1 0 0",
      "0001 s16 0101 s16 0 1 1 1 0 0",
      "0001 u16 0ffe u16 0 1 1 1 0 0",
      "0001 s16 0ffe u16 0 1 1 1 0 0",
      "0001 u16 0ffe s16 0 1 1 1 0 0",
      "0001 s16 0ffe s16 0 1 1 1 0 0",
      "0001 u16 0fff u16 0 1 1 1 0 0",
      "0001 s16 0fff u16 0 1 1 1 0 0",
      "0001 u16 0fff s16 0 1 1 1 0 0",
      "0001 s16 0fff s16 0 1 1 1 0 0",
      "0001 u16 1000 u16 0 1 1 1 0 0",
      "0001 s16 1000 u16 0 1 1 1 0 0",
      "0001 u16 1000 s16 0 1 1 1 0 0",
      "0001 s16 1000 s16 0 1 1 1 0 0",
      "0001 u16 1001 u16 0 1 1 1 0 0",
      "0001 s16 1001 u16 0 1 1 1 0 0",
      "0001 u16 1001 s16 0 1 1 1 0 0",
      "0001 s16 1001 s16 0 1 1 1 0 0",
      "0001 u16 fffe u16 0 1 1 1 0 0",
      "0001 s16 fffe u16 0 1 1 1 0 0",
      "0001 u16 fffe s16 0 1 0 0 1 1",
      "0001 s16 fffe s16 0 1 0 0 1 1",
      "0001 u16 ffff u16 0 1 1 1 0 0",
      "0001 s16 ffff u16 0 1 1 1 0 0",
      "0001 u16 ffff s16 0 1 0 0 1 1",
      "0001 s16 ffff s16 0 1 0 0 1 1",
      "00fe u16 0000 u16 0 1 0 0 1 1",
      "00fe s16 0000 u16 0 1 0 0 1 1",
      "00fe u16 0000 s16 0 1 0 0 1 1",
      "00fe s16 0000 s16 0 1 0 0 1 1",
      "00fe u16 0001 u16 0 1 0 0 1 1",
      "00fe s16 0001 u16 0 1 0 0 1 1",
      "00fe u16 0001 s16 0 1 0 0 1 1",
      "00fe s16 0001 s16 0 1 0 0 1 1",
      "00fe u16 00fe u16 1 0 0 1 0 1",
      "00fe s16 00fe u16 1 0 0 1 0 1",
      "00fe u16 00fe s16 1 0 0 1 0 1",
      "00fe s16 00fe s16 1 0 0 1 0 1",
      "00fe u16 00ff u16 0 1 1 1 0 0",
      "00fe s16 00ff u16 0 1 1 1 0 0",
      "00fe u16 00ff s16 0 1 1 1 0 0",
      "00fe s16 00ff s16 0 1 1 1 0 0",
      "00fe u16 0100 u16 0 1 1 1 0 0",
      "00fe s16 0100 u16 0 1 1 1 0 0",
      "00fe u16 0100 s16 0 1 1 1 0 0",
      "00fe s16 0100 s16 0 1 1 1 0 0",
      "00fe u16 0101 u16 0 1 1 1 0 0",
      "00fe s16 0101 u16 0 1 1 1 0 0",
      "00fe u16 0101 s16 0 1 1 1 0 0",
      "00fe s16 0101 s16 0 1 1 1 0 0",
      "00fe u16 0ffe u16 0 1 1 1 0 0",
      "00fe s16 0ffe u16 0 1 1 1 0 0",
      "00fe u16 0ffe s16 0 1 1 1 0 0",
      "00fe s16 0ffe s16 0 1 1 1 0 0",
      "00fe u16 0fff u16 0 1 1 1 0 0",
      "00fe s16 0fff u16 0 1 1 1 0 0",
      "00fe u16 0fff s16 0 1 1 1 0 0",
      "00fe s16 0fff s16 0 1 1 1 0 0",
      "00fe u16 1000 u16 0 1 1 1 0 0",
      "00fe s16 1000 u16 0 1 1 1 0 0",
      "00fe u16 1000 s16 0 1 1 1 0 0",
      "00fe s16 1000 s16 0 1 1 1 0 0",
      "00fe u16 1001 u16 0 1 1 1 0 0",
      "00fe s16 1001 u16 0 1 1 1 0 0",
      "00fe u16 1001 s16 0 1 1 1 0 0",
      "00fe s16 1001 s16 0 1 1 1 0 0",
      "00fe u16 fffe u16 0 1 1 1 0 0",
      "00fe s16 fffe u16 0 1 1 1 0 0",
      "00fe u16 fffe s16 0 1 0 0 1 1",
      "00fe s16 fffe s16 0 1 0 0 1 1",
      "00fe u16 ffff u16 0 1 1 1 0 0",
      "00fe s16 ffff u16 0 1 1 1 0 0",
      "00fe u16 ffff s16 0 1 0 0 1 1",
      "00fe s16 ffff s16 0 1 0 0 1 1",
      "00ff u16 0000 u16 0 1 0 0 1 1",
      "00ff s16 0000 u16 0 1 0 0 1 1",
      "00ff u16 0000 s16 0 1 0 0 1 1",
      "00ff s16 0000 s16 0 1 0 0 1 1",
      "00ff u16 0001 u16 0 1 0 0 1 1",
      "00ff s16 0001 u16 0 1 0 0 1 1",
      "00ff u16 0001 s16 0 1 0 0 1 1",
      "00ff s16 0001 s16 0 1 0 0 1 1",
      "00ff u16 00fe u16 0 1 0 0 1 1",
      "00ff s16 00fe u16 0 1 0 0 1 1",
      "00ff u16 00fe s16 0 1 0 0 1 1",
      "00ff s16 00fe s16 0 1 0 0 1 1",
      "00ff u16 00ff u16 1 0 0 1 0 1",
      "00ff s16 00ff u16 1 0 0 1 0 1",
      "00ff u16 00ff s16 1 0 0 1 0 1",
      "00ff s16 00ff s16 1 0 0 1 0 1",
      "00ff u16 0100 u16 0 1 1 1 0 0",
      "00ff s16 0100 u16 0 1 1 1 0 0",
      "00ff u16 0100 s16 0 1 1 1 0 0",
      "00ff s16 0100 s16 0 1 1 1 0 0",
      "00ff u16 0101 u16 0 1 1 1 0 0",
      "00ff s16 0101 u16 0 1 1 1 0 0",
      "00ff u16 0101 s16 0 1 1 1 0 0",
      "00ff s16 0101 s16 0 1 1 1 0 0",
      "00ff u16 0ffe u16 0 1 1 1 0 0",
      "00ff s16 0ffe u16 0 1 1 1 0 0",
      "00ff u16 0ffe s16 0 1 1 1 0 0",
      "00ff s16 0ffe s16 0 1 1 1 0 0",
      "00ff u16 0fff u16 0 1 1 1 0 0",
      "00ff s16 0fff u16 0 1 1 1 0 0",
      "00ff u16 0fff s16 0 1 1 1 0 0",
      "00ff s16 0fff s16 0 1 1 1 0 0",
      "00ff u16 1000 u16 0 1 1 1 0 0",
      "00ff s16 1000 u16 0 1 1 1 0 0",
      "00ff u16 1000 s16 0 1 1 1 0 0",
      "00ff s16 1000 s16 0 1 1 1 0 0",
      "00ff u16 1001 u16 0 1 1 1 0 0",
      "00ff s16 1001 u16 0 1 1 1 0 0",
      "00ff u16 1001 s16 0 1 1 1 0 0",
      "00ff s16 1001 s16 0 1 1 1 0 0",
      "00ff u16 fffe u16 0 1 1 1 0 0",
      "00ff s16 fffe u16 0 1 1 1 0 0",
      "00ff u16 fffe s16 0 1 0 0 1 1",
      "00ff s16 fffe s16 0 1 0 0 1 1",
      "00ff u16 ffff u16 0 1 1 1 0 0",
      "00ff s16 ffff u16 0 1 1 1 0 0",
      "00ff u16 ffff s16 0 1 0 0 1 1",
      "00ff s16 ffff s16 0 1 0 0 1 1",
      "0100 u16 0000 u16 0 1 0 0 1 1",
      "0100 s16 0000 u16 0 1 0 0 1 1",
      "0100 u16 0000 s16 0 1 0 0 1 1",
      "0100 s16 0000 s16 0 1 0 0 1 1",
      "0100 u16 0001 u16 0 1 0 0 1 1",
      "0100 s16 0001 u16 0 1 0 0 1 1",
      "0100 u16 0001 s16 0 1 0 0 1 1",
      "0100 s16 0001 s16 0 1 0 0 1 1",
      "0100 u16 00fe u16 0 1 0 0 1 1",
      "0100 s16 00fe u16 0 1 0 0 1 1",
      "0100 u16 00fe s16 0 1 0 0 1 1",
      "0100 s16 00fe s16 0 1 0 0 1 1",
      "0100 u16 00ff u16 0 1 0 0 1 1",
      "0100 s16 00ff u16 0 1 0 0 1 1",
      "0100 u16 00ff s16 0 1 0 0 1 1",
      "0100 s16 00ff s16 0 1 0 0 1 1",
      "0100 u16 0100 u16 1 0 0 1 0 1",
      "0100 s16 0100 u16 1 0 0 1 0 1",
      "0100 u16 0100 s16 1 0 0 1 0 1",
      "0100 s16 0100 s16 1 0 0 1 0 1",
      "0100 u16 0101 u16 0 1 1 1 0 0",
      "0100 s16 0101 u16 0 1 1 1 0 0",
      "0100 u16 0101 s16 0 1 1 1 0 0",
      "0100 s16 0101 s16 0 1 1 1 0 0",
      "0100 u16 0ffe u16 0 1 1 1 0 0",
      "0100 s16 0ffe u16 0 1 1 1 0 0",
      "0100 u16 0ffe s16 0 1 1 1 0 0",
      "0100 s16 0ffe s16 0 1 1 1 0 0",
      "0100 u16 0fff u16 0 1 1 1 0 0",
      "0100 s16 0fff u16 0 1 1 1 0 0",
      "0100 u16 0fff s16 0 1 1 1 0 0",
      "0100 s16 0fff s16 0 1 1 1 0 0",
      "0100 u16 1000 u16 0 1 1 1 0 0",
      "0100 s16 1000 u16 0 1 1 1 0 0",
      "0100 u16 1000 s16 0 1 1 1 0 0",
      "0100 s16 1000 s16 0 1 1 1 0 0",
      "0100 u16 1001 u16 0 1 1 1 0 0",
      "0100 s16 1001 u16 0 1 1 1 0 0",
      "0100 u16 1001 s16 0 1 1 1 0 0",
      "0100 s16 1001 s16 0 1 1 1 0 0",
      "0100 u16 fffe u16 0 1 1 1 0 0",
      "0100 s16 fffe u16 0 1 1 1 0 0",
      "0100 u16 fffe s16 0 1 0 0 1 1",
      "0100 s16 fffe s16 0 1 0 0 1 1",
      "0100 u16 ffff u16 0 1 1 1 0 0",
      "0100 s16 ffff u16 0 1 1 1 0 0",
      "0100 u16 ffff s16 0 1 0 0 1 1",
      "0100 s16 ffff s16 0 1 0 0 1 1",
      "0101 u16 0000 u16 0 1 0 0 1 1",
      "0101 s16 0000 u16 0 1 0 0 1 1",
      "0101 u16 0000 s16 0 1 0 0 1 1",
      "0101 s16 0000 s16 0 1 0 0 1 1",
      "0101 u16 0001 u16 0 1 0 0 1 1",
      "0101 s16 0001 u16 0 1 0 0 1 1",
      "0101 u16 0001 s16 0 1 0 0 1 1",
      "0101 s16 0001 s16 0 1 0 0 1 1",
      "0101 u16 00fe u16 0 1 0 0 1 1",
      "0101 s16 00fe u16 0 1 0 0 1 1",
      "0101 u16 00fe s16 0 1 0 0 1 1",
      "0101 s16 00fe s16 0 1 0 0 1 1",
      "0101 u16 00ff u16 0 1 0 0 1 1",
      "0101 s16 00ff u16 0 1 0 0 1 1",
      "0101 u16 00ff s16 0 1 0 0 1 1",
      "0101 s16 00ff s16 0 1 0 0 1 1",
      "0101 u16 0100 u16 0 1 0 0 1 1",
      "0101 s16 0100 u16 0 1 0 0 1 1",
      "0101 u16 0100 s16 0 1 0 0 1 1",
      "0101 s16 0100 s16 0 1 0 0 1 1",
      "0101 u16 0101 u16 1 0 0 1 0 1",
      "0101 s16 0101 u16 1 0 0 1 0 1",
      "0101 u16 0101 s16 1 0 0 1 0 1",
      "0101 s16 0101 s16 1 0 0 1 0 1",
      "0101 u16 0ffe u16 0 1 1 1 0 0",
      "0101 s16 0ffe u16 0 1 1 1 0 0",
      "0101 u16 0ffe s16 0 1 1 1 0 0",
      "0101 s16 0ffe s16 0 1 1 1 0 0",
      "0101 u16 0fff u16 0 1 1 1 0 0",
      "0101 s16 0fff u16 0 1 1 1 0 0",
      "0101 u16 0fff s16 0 1 1 1 0 0",
      "0101 s16 0fff s16 0 1 1 1 0 0",
      "0101 u16 1000 u16 0 1 1 1 0 0",
      "0101 s16 1000 u16 0 1 1 1 0 0",
      "0101 u16 1000 s16 0 1 1 1 0 0",
      "0101 s16 1000 s16 0 1 1 1 0 0",
      "0101 u16 1001 u16 0 1 1 1 0 0",
      "0101 s16 1001 u16 0 1 1 1 0 0",
      "0101 u16 1001 s16 0 1 1 1 0 0",
      "0101 s16 1001 s16 0 1 1 1 0 0",
      "0101 u16 fffe u16 0 1 1 1 0 0",
      "0101 s16 fffe u16 0 1 1 1 0 0",
      "0101 u16 fffe s16 0 1 0 0 1 1",
      "0101 s16 fffe s16 0 1 0 0 1 1",
      "0101 u16 ffff u16 0 1 1 1 0 0",
      "0101 s16 ffff u16 0 1 1 1 0 0",
      "0101 u16 ffff s16 0 1 0 0 1 1",
      "0101 s16 ffff s16 0 1 0 0 1 1",
      "0ffe u16 0000 u16 0 1 0 0 1 1",
      "0ffe s16 0000 u16 0 1 0 0 1 1",
      "0ffe u16 0000 s16 0 1 0 0 1 1",
      "0ffe s16 0000 s16 0 1 0 0 1 1",
      "0ffe u16 0001 u16 0 1 0 0 1 1",
      "0ffe s16 0001 u16 0 1 0 0 1 1",
      "0ffe u16 0001 s16 0 1 0 0 1 1",
      "0ffe s16 0001 s16 0 1 0 0 1 1",
      "0ffe u16 00fe u16 0 1 0 0 1 1",
      "0ffe s16 00fe u16 0 1 0 0 1 1",
      "0ffe u16 00fe s16 0 1 0 0 1 1",
      "0ffe s16 00fe s16 0 1 0 0 1 1",
      "0ffe u16 00ff u16 0 1 0 0 1 1",
      "0ffe s16 00ff u16 0 1 0 0 1 1",
      "0ffe u16 00ff s16 0 1 0 0 1 1",
      "0ffe s16 00ff s16 0 1 0 0 1 1",
      "0ffe u16 0100 u16 0 1 0 0 1 1",
      "0ffe s16 0100 u16 0 1 0 0 1 1",
      "0ffe u16 0100 s16 0 1 0 0 1 1",
      "0ffe s16 0100 s16 0 1 0 0 1 1",
      "0ffe u16 0101 u16 0 1 0 0 1 1",
      "0ffe s16 0101 u16 0 1 0 0 1 1",
      "0ffe u16 0101 s16 0 1 0 0 1 1",
      "0ffe s16 0101 s16 0 1 0 0 1 1",
      "0ffe u16 0ffe u16 1 0 0 1 0 1",
      "0ffe s16 0ffe u16 1 0 0 1 0 1",
      "0ffe u16 0ffe s16 1 0 0 1 0 1",
      "0ffe s16 0ffe s16 1 0 0 1 0 1",
      "0ffe u16 0fff u16 0 1 1 1 0 0",
      "0ffe s16 0fff u16 0 1 1 1 0 0",
      "0ffe u16 0fff s16 0 1 1 1 0 0",
      "0ffe s16 0fff s16 0 1 1 1 0 0",
      "0ffe u16 1000 u16 0 1 1 1 0 0",
      "0ffe s16 1000 u16 0 1 1 1 0 0",
      "0ffe u16 1000 s16 0 1 1 1 0 0",
      "0ffe s16 1000 s16 0 1 1 1 0 0",
      "0ffe u16 1001 u16 0 1 1 1 0 0",
      "0ffe s16 1001 u16 0 1 1 1 0 0",
      "0ffe u16 1001 s16 0 1 1 1 0 0",
      "0ffe s16 1001 s16 0 1 1 1 0 0",
      "0ffe u16 fffe u16 0 1 1 1 0 0",
      "0ffe s16 fffe u16 0 1 1 1 0 0",
      "0ffe u16 fffe s16 0 1 0 0 1 1",
      "0ffe s16 fffe s16 0 1 0 0 1 1",
      "0ffe u16 ffff u16 0 1 1 1 0 0",
      "0ffe s16 ffff u16 0 1 1 1 0 0",
      "0ffe u16 ffff s16 0 1 0 0 1 1",
      "0ffe s16 ffff s16 0 1 0 0 1 1",
      "0fff u16 0000 u16 0 1 0 0 1 1",
      "0fff s16 0000 u16 0 1 0 0 1 1",
      "0fff u16 0000 s16 0 1 0 0 1 1",
      "0fff s16 0000 s16 0 1 0 0 1 1",
      "0fff u16 0001 u16 0 1 0 0 1 1",
      "0fff s16 0001 u16 0 1 0 0 1 1",
      "0fff u16 0001 s16 0 1 0 0 1 1",
      "0fff s16 0001 s16 0 1 0 0 1 1",
      "0fff u16 00fe u16 0 1 0 0 1 1",
      "0fff s16 00fe u16 0 1 0 0 1 1",
      "0fff u16 00fe s16 0 1 0 0 1 1",
      "0fff s16 00fe s16 0 1 0 0 1 1",
      "0fff u16 00ff u16 0 1 0 0 1 1",
      "0fff s16 00ff u16 0 1 0 0 1 1",
      "0fff u16 00ff s16 0 1 0 0 1 1",
      "0fff s16 00ff s16 0 1 0 0 1 1",
      "0fff u16 0100 u16 0 1 0 0 1 1",
      "0fff s16 0100 u16 0 1 0 0 1 1",
      "0fff u16 0100 s16 0 1 0 0 1 1",
      "0fff s16 0100 s16 0 1 0 0 1 1",
      "0fff u16 0101 u16 0 1 0 0 1 1",
      "0fff s16 0101 u16 0 1 0 0 1 1",
      "0fff u16 0101 s16 0 1 0 0 1 1",
      "0fff s16 0101 s16 0 1 0 0 1 1",
      "0fff u16 0ffe u16 0 1 0 0 1 1",
      "0fff s16 0ffe u16 0 1 0 0 1 1",
      "0fff u16 0ffe s16 0 1 0 0 1 1",
      "0fff s16 0ffe s16 0 1 0 0 1 1",
      "0fff u16 0fff u16 1 0 0 1 0 1",
      "0fff s16 0fff u16 1 0 0 1 0 1",
      "0fff u16 0fff s16 1 0 0 1 0 1",
      "0fff s16 0fff s16 1 0 0 1 0 1",
      "0fff u16 1000 u16 0 1 1 1 0 0",
      "0fff s16 1000 u16 0 1 1 1 0 0",
      "0fff u16 1000 s16 0 1 1 1 0 0",
      "0fff s16 1000 s16 0 1 1 1 0 0",
      "0fff u16 1001 u16 0 1 1 1 0 0",
      "0fff s16 1001 u16 0 1 1 1 0 0",
      "0fff u16 1001 s16 0 1 1 1 0 0",
      "0fff s16 1001 s16 0 1 1 1 0 0",
      "0fff u16 fffe u16 0 1 1 1 0 0",
      "0fff s16 fffe u16 0 1 1 1 0 0",
      "0fff u16 fffe s16 0 1 0 0 1 1",
      "0fff s16 fffe s16 0 1 0 0 1 1",
      "0fff u16 ffff u16 0 1 1 1 0 0",
      "0fff s16 ffff u16 0 1 1 1 0 0",
      "0fff u16 ffff s16 0 1 0 0 1 1",
      "0fff s16 ffff s16 0 1 0 0 1 1",
      "1000 u16 0000 u16 0 1 0 0 1 1",
      "1000 s16 0000 u16 0 1 0 0 1 1",
      "1000 u16 0000 s16 0 1 0 0 1 1",
      "1000 s16 0000 s16 0 1 0 0 1 1",
      "1000 u16 0001 u16 0 1 0 0 1 1",
      "1000 s16 0001 u16 0 1 0 0 1 1",
      "1000 u16 0001 s16 0 1 0 0 1 1",
      "1000 s16 0001 s16 0 1 0 0 1 1",
      "1000 u16 00fe u16 0 1 0 0 1 1",
      "1000 s16 00fe u16 0 1 0 0 1 1",
      "1000 u16 00fe s16 0 1 0 0 1 1",
      "1000 s16 00fe s16 0 1 0 0 1 1",
      "1000 u16 00ff u16 0 1 0 0 1 1",
      "1000 s16 00ff u16 0 1 0 0 1 1",
      "1000 u16 00ff s16 0 1 0 0 1 1",
      "1000 s16 00ff s16 0 1 0 0 1 1",
      "1000 u16 0100 u16 0 1 0 0 1 1",
      "1000 s16 0100 u16 0 1 0 0 1 1",
      "1000 u16 0100 s16 0 1 0 0 1 1",
      "1000 s16 0100 s16 0 1 0 0 1 1",
      "1000 u16 0101 u16 0 1 0 0 1 1",
      "1000 s16 0101 u16 0 1 0 0 1 1",
      "1000 u16 0101 s16 0 1 0 0 1 1",
      "1000 s16 0101 s16 0 1 0 0 1 1",
      "1000 u16 0ffe u16 0 1 0 0 1 1",
      "1000 s16 0ffe u16 0 1 0 0 1 1",
      "1000 u16 0ffe s16 0 1 0 0 1 1",
      "1000 s16 0ffe s16 0 1 0 0 1 1",
      "1000 u16 0fff u16 0 1 0 0 1 1",
      "1000 s16 0fff u16 0 1 0 0 1 1",
      "1000 u16 0fff s16 0 1 0 0 1 1",
      "1000 s16 0fff s16 0 1 0 0 1 1",
      "1000 u16 1000 u16 1 0 0 1 0 1",
      "1000 s16 1000 u16 1 0 0 1 0 1",
      "1000 u16 1000 s16 1 0 0 1 0 1",
      "1000 s16 1000 s16 1 0 0 1 0 1",
      "1000 u16 1001 u16 0 1 1 1 0 0",
      "1000 s16 1001 u16 0 1 1 1 0 0",
      "1000 u16 1001 s16 0 1 1 1 0 0",
      "1000 s16 1001 s16 0 1 1 1 0 0",
      "1000 u16 fffe u16 0 1 1 1 0 0",
      "1000 s16 fffe u16 0 1 1 1 0 0",
      "1000 u16 fffe s16 0 1 0 0 1 1",
      "1000 s16 fffe s16 0 1 0 0 1 1",
      "1000 u16 ffff u16 0 1 1 1 0 0",
      "1000 s16 ffff u16 0 1 1 1 0 0",
      "1000 u16 ffff s16 0 1 0 0 1 1",
      "1000 s16 ffff s16 0 1 0 0 1 1",
      "1001 u16 0000 u16 0 1 0 0 1 1",
      "1001 s16 0000 u16 0 1 0 0 1 1",
      "1001 u16 0000 s16 0 1 0 0 1 1",
      "1001 s16 0000 s16 0 1 0 0 1 1",
      "1001 u16 0001 u16 0 1 0 0 1 1",
      "1001 s16 0001 u16 0 1 0 0 1 1",
      "1001 u16 0001 s16 0 1 0 0 1 1",
      "1001 s16 0001 s16 0 1 0 0 1 1",
      "1001 u16 00fe u16 0 1 0 0 1 1",
      "1001 s16 00fe u16 0 1 0 0 1 1",
      "1001 u16 00fe s16 0 1 0 0 1 1",
      "1001 s16 00fe s16 0 1 0 0 1 1",
      "1001 u16 00ff u16 0 1 0 0 1 1",
      "1001 s16 00ff u16 0 1 0 0 1 1",
      "1001 u16 00ff s16 0 1 0 0 1 1",
      "1001 s16 00ff s16 0 1 0 0 1 1",
      "1001 u16 0100 u16 0 1 0 0 1 1",
      "1001 s16 0100 u16 0 1 0 0 1 1",
      "1001 u16 0100 s16 0 1 0 0 1 1",
      "1001 s16 0100 s16 0 1 0 0 1 1",
      "1001 u16 0101 u16 0 1 0 0 1 1",
      "1001 s16 0101 u16 0 1 0 0 1 1",
      "1001 u16 0101 s16 0 1 0 0 1 1",
      "1001 s16 0101 s16 0 1 0 0 1 1",
      "1001 u16 0ffe u16 0 1 0 0 1 1",
      "1001 s16 0ffe u16 0 1 0 0 1 1",
      "1001 u16 0ffe s16 0 1 0 0 1 1",
      "1001 s16 0ffe s16 0 1 0 0 1 1",
      "1001 u16 0fff u16 0 1 0 0 1 1",
      "1001 s16 0fff u16 0 1 0 0 1 1",
      "1001 u16 0fff s16 0 1 0 0 1 1",
      "1001 s16 0fff s16 0 1 0 0 1 1",
      "1001 u16 1000 u16 0 1 0 0 1 1",
      "1001 s16 1000 u16 0 1 0 0 1 1",
      "1001 u16 1000 s16 0 1 0 0 1 1",
      "1001 s16 1000 s16 0 1 0 0 1 1",
      "1001 u16 1001 u16 1 0 0 1 0 1",
      "1001 s16 1001 u16 1 0 0 1 0 1",
      "1001 u16 1001 s16 1 0 0 1 0 1",
      "1001 s16 1001 s16 1 0 0 1 0 1",
      "1001 u16 fffe u16 0 1 1 1 0 0",
      "1001 s16 fffe u16 0 1 1 1 0 0",
      "1001 u16 fffe s16 0 1 0 0 1 1",
      "1001 s16 fffe s16 0 1 0 0 1 1",
      "1001 u16 ffff u16 0 1 1 1 0 0",
      "1001 s16 ffff u16 0 1 1 1 0 0",
      "1001 u16 ffff s16 0 1 0 0 1 1",
      "1001 s16 ffff s16 0 1 0 0 1 1",
      "fffe u16 0000 u16 0 1 0 0 1 1",
      "fffe s16 0000 u16 0 1 1 1 0 0",
      "fffe u16 0000 s16 0 1 0 0 1 1",
      "fffe s16 0000 s16 0 1 1 1 0 0",
      "fffe u16 0001 u16 0 1 0 0 1 1",
      "fffe s16 0001 u16 0 1 1 1 0 0",
      "fffe u16 0001 s16 0 1 0 0 1 1",
      "fffe s16 0001 s16 0 1 1 1 0 0",
      "fffe u16 00fe u16 0 1 0 0 1 1",
      "fffe s16 00fe u16 0 1 1 1 0 0",
      "fffe u16 00fe s16 0 1 0 0 1 1",
      "fffe s16 00fe s16 0 1 1 1 0 0",
      "fffe u16 00ff u16 0 1 0 0 1 1",
      "fffe s16 00ff u16 0 1 1 1 0 0",
      "fffe u16 00ff s16 0 1 0 0 1 1",
      "fffe s16 00ff s16 0 1 1 1 0 0",
      "fffe u16 0100 u16 0 1 0 0 1 1",
      "fffe s16 0100 u16 0 1 1 1 0 0",
      "fffe u16 0100 s16 0 1 0 0 1 1",
      "fffe s16 0100 s16 0 1 1 1 0 0",
      "fffe u16 0101 u16 0 1 0 0 1 1",
      "fffe s16 0101 u16 0 1 1 1 0 0",
      "fffe u16 0101 s16 0 1 0 0 1 1",
      "fffe s16 0101 s16 0 1 1 1 0 0",
      "fffe u16 0ffe u16 0 1 0 0 1 1",
      "fffe s16 0ffe u16 0 1 1 1 0 0",
      "fffe u16 0ffe s16 0 1 0 0 1 1",
      "fffe s16 0ffe s16 0 1 1 1 0 0",
      "fffe u16 0fff u16 0 1 0 0 1 1",
      "fffe s16 0fff u16 0 1 1 1 0 0",
      "fffe u16 0fff s16 0 1 0 0 1 1",
      "fffe s16 0fff s16 0 1 1 1 0 0",
      "fffe u16 1000 u16 0 1 0 0 1 1",
      "fffe s16 1000 u16 0 1 1 1 0 0",
      "fffe u16 1000 s16 0 1 0 0 1 1",
      "fffe s16 1000 s16 0 1 1 1 0 0",
      "fffe u16 1001 u16 0 1 0 0 1 1",
      "fffe s16 1001 u16 0 1 1 1 0 0",
      "fffe u16 1001 s16 0 1 0 0 1 1",
      "fffe s16 1001 s16 0 1 1 1 0 0",
      "fffe u16 fffe u16 1 0 0 1 0 1",
      "fffe s16 fffe u16 0 1 1 1 0 0",
      "fffe u16 fffe s16 0 1 0 0 1 1",
      "fffe s16 fffe s16 1 0 0 1 0 1",
      "fffe u16 ffff u16 0 1 1 1 0 0",
      "fffe s16 ffff u16 0 1 1 1 0 0",
      "fffe u16 ffff s16 0 1 0 0 1 1",
      "fffe s16 ffff s16 0 1 1 1 0 0",
      "ffff u16 0000 u16 0 1 0 0 1 1",
      "ffff s16 0000 u16 0 1 1 1 0 0",
      "ffff u16 0000 s16 0 1 0 0 1 1",
      "ffff s16 0000 s16 0 1 1 1 0 0",
      "ffff u16 0001 u16 0 1 0 0 1 1",
      "ffff s16 0001 u16 0 1 1 1 0 0",
      "ffff u16 0001 s16 0 1 0 0 1 1",
      "ffff s16 0001 s16 0 1 1 1 0 0",
      "ffff u16 00fe u16 0 1 0 0 1 1",
      "ffff s16 00fe u16 0 1 1 1 0 0",
      "ffff u16 00fe s16 0 1 0 0 1 1",
      "ffff s16 00fe s16 0 1 1 1 0 0",
      "ffff u16 00ff u16 0 1 0 0 1 1",
      "ffff s16 00ff u16 0 1 1 1 0 0",
      "ffff u16 00ff s16 0 1 0 0 1 1",
      "ffff s16 00ff s16 0 1 1 1 0 0",
      "ffff u16 0100 u16 0 1 0 0 1 1",
      "ffff s16 0100 u16 0 1 1 1 0 0",
      "ffff u16 0100 s16 0 1 0 0 1 1",
      "ffff s16 0100 s16 0 1 1 1 0 0",
      "ffff u16 0101 u16 0 1 0 0 1 1",
      "ffff s16 0101 u16 0 1 1 1 0 0",
      "ffff u16 0101 s16 0 1 0 0 1 1",
      "ffff s16 0101 s16 0 1 1 1 0 0",
      "ffff u16 0ffe u16 0 1 0 0 1 1",
      "ffff s16 0ffe u16 0 1 1 1 0 0",
      "ffff u16 0ffe s16 0 1 0 0 1 1",
      "ffff s16 0ffe s16 0 1 1 1 0 0",
      "ffff u16 0fff u16 0 1 0 0 1 1",
      "ffff s16 0fff u16 0 1 1 1 0 0",
      "ffff u16 0fff s16 0 1 0 0 1 1",
      "ffff s16 0fff s16 0 1 1 1 0 0",
      "ffff u16 1000 u16 0 1 0 0 1 1",
      "ffff s16 1000 u16 0 1 1 1 0 0",
      "ffff u16 1000 s16 0 1 0 0 1 1",
      "ffff s16 1000 s16 0 1 1 1 0 0",
      "ffff u16 1001 u16 0 1 0 0 1 1",
      "ffff s16 1001 u16 0 1 1 1 0 0",
      "ffff u16 1001 s16 0 1 0 0 1 1",
      "ffff s16 1001 s16 0 1 1 1 0 0",
      "ffff u16 fffe u16 0 1 0 0 1 1",
      "ffff s16 fffe u16 0 1 1 1 0 0",
      "ffff u16 fffe s16 0 1 0 0 1 1",
      "ffff s16 fffe s16 0 1 0 0 1 1",
      "ffff u16 ffff u16 1 0 0 1 0 1",
      "ffff s16 ffff u16 0 1 1 1 0 0",
      "ffff u16 ffff s16 0 1 0 0 1 1",
      "ffff s16 ffff s16 1 0 0 1 0 1",
      */
    ).foreach { string =>
      val expectedComparison = stringToExpectedComparison(string)
      compareAndTestAll(expectedComparison)
    }
  }

  private def hasHeapValueEqualTo(value: Int, variableName: String, heapIndex: Int)(vmContext: VmContext): Boolean =
    vmContext.heap.getVariable(heapIndex) match {
      case Ok(Some(Variable.Scalar(name, v))) if name == variableName =>
        v.toInt == value

      case _ => false
    }
}
